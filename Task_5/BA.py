import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from plotnine import *
from IPython.display import display

def main(data):
    print(" ")
    print("Lets explore the dataset")
    print(" ")
    print(data.head(10))
    print(" ")
    print('\nThe shape of the data is: ',data.shape)
    print(" ")
    print("\nWhat about the datatypes: \n",data.dtypes)
    print(" ")
    print("\nThe whole data can be described as : \n",data.describe())
    print(" ")
    print("Checking the dataset informations")
    print(data.info())
    print(" ")
    print("Now lets check if there is any null value")
    print(data.isnull().sum())
    print(" ")
    print("Lets chek the correlation between the variables")
    print(data.corr())
    
    list1=['Ship Mode','Segment','Country','City','State','Postal Code','Region','Category','Sub-Category','Sales','Quantity','Discount','Profit']
    list2=['Ship Mode','Segment','Country','City','State','Postal Code','Region','Category','Sub-Category','Quantity','Discount']

    print("Visualization of data : ")
    print(" ")
    data.hist(bins=50 ,figsize=(20,15))
    plt.show()
    for l in list2:
        sns.countplot(y=l, data=data, order = data[l].value_counts().index)
        plt.show()
    print(" ")
    col=['Postal Code']
    data=data.drop(columns=col,axis=1)
    print(" ")
    print("Datas are not distributed normally")
    Profit_plt = (ggplot(data, aes(x='Sub-Category', y='Profit', fill='Sub-Category')) + geom_col() + coord_flip()+ scale_fill_brewer(type='div', palette="Spectral") + theme_classic() + ggtitle('Pie Chart'))
    display(Profit_plt)
    print(" ")
    print("This shows the profit and loss of each and every subcategories")
    print("Here we can see that binders sub-category has suffered the highest amount of loss and also profit amongst all other sub-Categories")
    print("Copiers Sub-category has gain highest amount of profit with no loss.There are other sub-categories too who have not faced any kind of losses but their profit margins are low.")
    sns.set(style="whitegrid")
    plt.figure(2, figsize=(20,15))
    sns.barplot(x='Sub-Category',y='Profit', data=data, palette='Spectral')
    plt.suptitle('Consumption Patterns', fontsize=16)
    plt.show()
    ship=ggplot(data, aes(x='Ship Mode', fill = 'Category')) + geom_bar(stat = 'count')
    display(ship)
    figsize=(15,10)
    sns.pairplot(data,hue='Sub-Category')
    plt.show()
    print(" ")
    print("We found out that our data is not normal. It has some outliers in it.")
    print("Lets explore the outliers using boxplot")
    print(" ")
    print(" ")
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=1),figure_size=(10,5),axis_ticks_length_major=10,axis_ticks_length_minor=5)
    outliers=ggplot(data, aes(x='Sub-Category', fill='Sales')) + geom_bar() + facet_wrap(['Segment']) + flip_xlabels +theme(axis_text_x = element_text(size=12))+ggtitle("Sales From Each Segment")
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=5,axis_ticks_length_minor=5)
    outliers=(ggplot(data, aes(x='Category', y='Sales')) + geom_boxplot() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['State']) + flip_xlabels + coord_cartesian(ylim = (0, 2000))+ggtitle("Sales From Every State Of United States Of Whole Data"))
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=5,axis_ticks_length_minor=5)
    outliers=(ggplot(data, aes(x='Category', y='Profit')) + geom_boxplot() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['State']) + flip_xlabels+coord_cartesian(ylim = (-4000,5000))+ggtitle("Profit/Loss From Each State"))
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=50,axis_ticks_length_minor=50)
    outliers= (ggplot(data, aes(x='Category', fill='Sales')) + geom_bar() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['Region']) + flip_xlabels+ ggtitle("Sales From Each Region"))
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=5,axis_ticks_length_minor=5)
    outliers=(ggplot(data, aes(x='Region', fill='Quantity')) + geom_bar() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['Discount']) + flip_xlabels+ggtitle("Discount on number of Quantity From Each State"))
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=5,axis_ticks_length_minor=5)
    outliers=(ggplot(data, aes(x='Category', y='Discount')) + geom_boxplot() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['State']) + flip_xlabels+ggtitle("Discount on categories From Each State"))
    display(outliers)
    group=pd.DataFrame(data.groupby(['Ship Mode','Segment','Category','Sub-Category','State','Region'])['Quantity','Discount','Sales','Profit'].sum().reset_index())
    print(group)
    print(" ")
    print(" ")
    print("Lets check the result after grouping")
    print(" ")
    print(" ")
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=1),figure_size=(10,5),axis_ticks_length_major=10,axis_ticks_length_minor=5)
    outliers=ggplot(group, aes(x='Sub-Category', fill='Sales')) + geom_bar() + facet_wrap(['Segment']) + flip_xlabels +theme(axis_text_x = element_text(size=12))+ggtitle("Sales From Each Segment after grouping")
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=5,axis_ticks_length_minor=5)
    outliers=(ggplot(group, aes(x='Category', y='Sales')) + geom_boxplot() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['State']) + flip_xlabels + coord_cartesian(ylim = (0, 2000))+ggtitle("Sales From Every State Of United States Of Whole Data after grouping"))
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=5,axis_ticks_length_minor=5)
    outliers=(ggplot(group, aes(x='Category', y='Profit')) + geom_boxplot() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['State']) + flip_xlabels+coord_cartesian(ylim = (-4000,5000))+ggtitle("Profit/Loss From Each State after grouping"))
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=50,axis_ticks_length_minor=50)
    outliers= (ggplot(group, aes(x='Category', fill='Sales')) + geom_bar() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['Region']) + flip_xlabels+ ggtitle("Sales From Each Region after grouping"))
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=5,axis_ticks_length_minor=5)
    outliers=(ggplot(group, aes(x='Region', fill='Quantity')) + geom_bar() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['Discount']) + flip_xlabels+ggtitle("Discount on number of Quantity From Each State after grouping"))
    display(outliers)
    flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=10),figure_size=(10,10),axis_ticks_length_major=5,axis_ticks_length_minor=5)
    outliers=(ggplot(group, aes(x='Category', y='Discount')) + geom_boxplot() + theme(axis_text_x = element_text(size=10)) + facet_wrap(['State']) + flip_xlabels+ggtitle("Discount on categories From Each State after grouping"))
    display(outliers)
    print("Lets use K-means cluster for analysis")
    print(" ")
    print(" ")
    print(data.head())
    print(" ")
    print(" ")
    x = data.iloc[:, [8, 9, 10, 11]].values
    from sklearn.cluster import KMeans
    wcss = []
    for i in range(1, 11):
        kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0).fit(x)
        wcss.append(kmeans.inertia_)
    sns.set_style("whitegrid") 
    sns.FacetGrid(data, hue ="Sub-Category",height = 6).map(plt.scatter,'Sales','Quantity')
    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 100, c = 'yellow', label = 'Centroids')
    plt.legend()
    plt.show()
    sns.set_style("whitegrid") 
    sns.FacetGrid(data, hue ="Sub-Category",height = 6).map(plt.scatter,'Sales','Profit')
    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 100, c = 'yellow', label = 'Centroids')
    plt.legend()
    plt.show()


if __name__=="__main__":
    print("Hello there,")
    print("My name is Prify Philip")
    data =pd.read_csv(r'SampleSuperstore.csv')
    main(data)